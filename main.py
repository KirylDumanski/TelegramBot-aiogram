import sqlite3
from datetime import datetime
from typing import Tuple

import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from data import config

# Project Init
bot = Bot(token=config.BOT_TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# SQL Init
connection = sqlite3.connect('db.db')
cursor = connection.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS rates(
    date TEXT PRIMARY KEY,
    usd TEXT,
    eur TEXT,
    rub TEXT
    )""")

# Global vars
TODAY_W0 = '{dt.year}-{dt.month}-{dt.day}'.format(dt=datetime.today())  # without leading zeroes, ex: 2022-3-9

# Keyboards
kb_main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
btn_rates = KeyboardButton('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí∞')
btn_weather = KeyboardButton('–ü–æ–≥–æ–¥–∞ üåû')
kb_main_menu.add(btn_rates, btn_weather)

# Keyboards - Rates
kb_rates_when = ReplyKeyboardMarkup(resize_keyboard=True)
btn_rates_on_today = KeyboardButton('–ù–∞ —Å–µ–≥–æ–¥–Ω—è üìÖ')
btn_rates_on_date = KeyboardButton('–ù–∞ –¥–∞—Ç—É üìÖ')
kb_rates_when.add(btn_rates_on_today, btn_rates_on_date)

# Keyboards - Weather
kb_weather_where = ReplyKeyboardMarkup(resize_keyboard=True)
btn_weather_brest = KeyboardButton('–ë—Ä–µ—Å—Ç')
btn_weather_vitebsk = KeyboardButton('–í–∏—Ç–µ–±—Å–∫')
btn_weather_gomel = KeyboardButton('–ì–æ–º–µ–ª—å')
btn_weather_grodno = KeyboardButton('–ì—Ä–æ–¥–Ω–æ')
btn_weather_minsk = KeyboardButton('–ú–∏–Ω—Å–∫')
btn_weather_mogilev = KeyboardButton('–ú–æ–≥–∏–ª–µ–≤')
kb_weather_where.add(btn_weather_brest, btn_weather_vitebsk, btn_weather_gomel, btn_weather_grodno,
                     btn_weather_minsk, btn_weather_mogilev)


# States
class RatesGetDate(StatesGroup):
    date_text = State()


class Weather(StatesGroup):
    where = State()
    when = State()
    on_date = State()


# Util
async def on_startup(_):
    """Print the message when the bot starts"""
    print('BOT ONLINE!')


# Message handlers - Commands
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_full_name = message.from_user.full_name
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç, {user_full_name}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! –°–¥–µ–ª–∞–π –≤—ã–±–æ—Ä.', reply_markup=kb_main_menu)


@dp.message_handler(commands=['help'])
async def start(message: types.Message):
    await message.reply('–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?')


# Message handlers - User - Weather
@dp.message_handler(Text(equals=['–ü–æ–≥–æ–¥–∞ üåû']))
async def weather(message: types.Message):
    await message.reply('–ì–¥–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞?', reply_markup=kb_weather_where)
    await Weather.where.set()


@dp.message_handler(state=Weather.where)
async def forecast(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(where=answer)
    city: dict = await state.get_data('where')
    text = get_weather(city['where'])
    await message.reply(text, reply_markup=kb_main_menu)
    await state.finish()


# Message handlers - User - Rates
@dp.message_handler()
async def exchange_rates(message: types.Message):
    if message.text == '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí∞':
        await message.reply('–ù–∞ –∫–æ–≥–¥–∞?', reply_markup=kb_rates_when)

    if message.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è üìÖ':
        await send_rates(message, TODAY_W0)
    if message.text == '–ù–∞ –¥–∞—Ç—É üìÖ':
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2022-09-01')
        await RatesGetDate.date_text.set()


@dp.message_handler(state=RatesGetDate.date_text)
async def get_date_from_user(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(date_text=answer)

    date_text: dict = await state.get_data('date_text')

    try:
        await send_rates(message, date_text['date_text'])
        await state.finish()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ì–ì–ì–ì-–ú–ú-–î–î")
        answer = message.text
        await state.update_data(date_text=answer)


# Misc - Rates
def get_rates_from_server(date_text: str) -> None:
    """Get exchange rates (usd, eur, rub) through the API of the National Bank
    of the Republic of Belarus and add them to the database  """

    req = requests.get(f'https://www.nbrb.by/api/exrates/rates?ondate={date_text}&periodicity=0')
    USD = EUR = RUB = None
    if req.status_code == 200:
        for i in req.json():
            if i['Cur_Abbreviation'] == 'USD':
                USD = i['Cur_OfficialRate']
            if i['Cur_Abbreviation'] == 'EUR':
                EUR = i['Cur_OfficialRate']
            if i['Cur_Abbreviation'] == 'RUB':
                RUB = i['Cur_OfficialRate']

    cursor.execute("""INSERT INTO rates VALUES(?,?,?,?)""", (date_text, USD, EUR, RUB))
    connection.commit()


def date_format_validate(date_text: str) -> str:
    """Check if user input date formatted YYYY-MM-DD without leading zeroes"""
    try:
        user_date = '{dt.year}-{dt.month}-{dt.day}'.format(dt=datetime.strptime(date_text, '%Y-%m-%d'))
    except ValueError:
        raise ValueError("Incorrect data format, should be YYYY-MM-DD")

    return user_date


def get_actual_rates(date_text: str) -> tuple:
    """Get exchange rates from the database, if they are missing, calls the function
    get_rates_from_server and returns a tuple with exchange rates"""

    date = date_format_validate(date_text)
    cursor.execute("""SELECT usd, eur, rub FROM rates WHERE date=?""", (date,))

    result = cursor.fetchall()  # [('2.5517',)]

    if result:
        return result[0]
    else:
        get_rates_from_server(date)
        cursor.execute("""SELECT usd, eur, rub FROM rates WHERE date=?""", (date,))
        result = cursor.fetchall()
        return result[0]


async def send_rates(message: types.Message, date_text: str) -> None:
    """Sends exchange rates to chat"""
    rates: Tuple[str] = get_actual_rates(date_text)
    message_text = f"""–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë –Ω–∞ {date_text}:
---------------------------------------------------
{rates[0].ljust(6, '0')} BYN - 1 –î–æ–ª–ª–∞—Ä üá∫üá∏ 
{rates[1].ljust(6, '0')} BYN - 1 –ï–≤—Ä–æ üá™üá∫ 
{rates[2].ljust(6, '0')} BYN - 100 –†–æ—Å.—Ä—É–±–ª–µ–π üá∑üá∫ """
    await message.reply(message_text, reply_markup=kb_main_menu)


# Misc - Weather
city_id = {'–ú–∏–Ω—Å–∫': 625144,
           '–ë—Ä–µ—Å—Ç': 629634,
           '–í–∏—Ç–µ–±—Å–∫': 620127,
           '–ì–æ–º–µ–ª—å': 627907,
           '–ì—Ä–æ–¥–Ω–æ': 627904,
           '–ú–æ–≥–∏–ª–µ–≤': 625665
           }


def get_weather(city: str) -> str:
    """Get request from OpenWeatherMap API and return parsed string"""
    params = {'id': city_id[city],
              'units': 'metric',
              'lang': 'ru',
              'appid': config.WEATHER_TOKEN}
    data = requests.get('https://api.openweathermap.org/data/2.5/weather?', params=params).json()
    # Parsing json
    time = datetime.fromtimestamp(data['dt']).time()
    temp = round(data['main']['temp'])
    feels_like = round(data['main']['feels_like'])
    pressure = round(data['main']['pressure'] / 1.333)
    city = data['name']
    sunrise = datetime.fromtimestamp(data['sys']['sunrise']).time()
    sunset = datetime.fromtimestamp(data['sys']['sunset']).time()
    weather_desc = data['weather'][0]['description'].capitalize()
    wind_speed = data['wind']['speed']

    text = f"<u>–í –≥–æ—Ä–æ–¥–µ {city} –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {time}</u>:\n" \
           f"{weather_desc}.\n" \
           f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C\n" \
           f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å.\n" \
           f"–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º. —Ä—Ç. —Å—Ç.\n" \
           f"\n" \
           f"–í–æ—Å—Ö–æ–¥: {sunrise}\n" \
           f"–ó–∞–∫–∞—Ç: {sunset}"

    return text


# Polling
executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
